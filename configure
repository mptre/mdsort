#!/bin/sh

set -e

atexit() {
	err=$?

	# Dump contents of generated files to config.log.
	set -x
	cat config.h
	cat Makefile.inc
	rm -f "$@"
	[ $err -ne 0 ] && fatal
	exit 0
}

compile() {
	$CC -Werror -o /dev/null -x c -
}

fatal() {
	[ $# -gt 0 ] && echo "fatal: ${*}"
	exec 1>&3 2>&4
	cat config.log
	return 1
}

headers() {
	cat >"$TMP"
	[ -s "$TMP" ] || return 0

	xargs printf '#include <%s>\n' <"$TMP"
}

makevar() {
	make -sf - <<EOF
all:
	@echo \${${1}}
EOF
}

check_arc4random() {
	compile <<-EOF
	#include <stdlib.h>

	int main(void) {
		return !(arc4random() <= 0xffffffff);
	}
	EOF
}

check_dead() {
	compile <<-EOF
	#include <stdlib.h>

	__dead int dead(void);

	int main(void) {
		return 0;
	}
	EOF
}

check_pledge() {
	compile <<-EOF
	#include <unistd.h>

	int main(void) {
		return !(pledge("stdio", NULL) == 0);
	}
	EOF
}

check_reallocarray() {
	compile <<-EOF
	#include <stdlib.h>

	int main(void) {
		return !(reallocarray(NULL, 1, 1) != NULL);
	}
	EOF
}

check_queue() {
	compile <<-EOF
	#include <sys/queue.h>

	int main(void) {
		return 0;
	}
	EOF
}

check_yacc() {
        command -v yacc >/dev/null
}

HAVE_ARC4RANDOM=0
HAVE_DEAD=0
HAVE_PLEDGE=0
HAVE_QUEUE=0
HAVE_REALLOCARRAY=0

CC=$(makevar CC)
CFLAGS=$(makevar CFLAGS)
CFLAGS="${CFLAGS} ${DEBUG} -Wall -Wextra -MD -MP"
INSTALL=$(makevar INSTALL)

: "${CPPFLAGS:=}"
: "${DEBUG:=}"
: "${INSTALL:=install}"
: "${LDFLAGS:=}"
: "${YFLAGS:=}"

exec 3>&1 4>&2
exec 1>config.log 2>&1

TMP=$(mktemp -t configure.XXXXXX)
trap "atexit $TMP" EXIT

# At this point, all variables used must be defined.
set -u
# Enable tracing, will end up in config.log.
set -x

check_yacc || fatal "cannot find yacc in PATH"

check_arc4random && HAVE_ARC4RANDOM=1
check_dead && HAVE_DEAD=1
check_pledge && HAVE_PLEDGE=1
check_queue && HAVE_QUEUE=1
check_reallocarray && HAVE_REALLOCARRAY=1

# Headers needed for function prototypes.
(
[ $HAVE_ARC4RANDOM -eq 0 ] && echo stdint.h
[ $HAVE_PLEDGE -eq 0 ] && echo stdlib.h
[ $HAVE_REALLOCARRAY -eq 0 ] && echo stdlib.h
) | sort | uniq | headers >config.h

(
[ $HAVE_ARC4RANDOM -eq 1 ] && printf '#define HAVE_ARC4RANDOM\t1\n'
[ $HAVE_PLEDGE -eq 1 ] && printf '#define HAVE_PLEDGE\t1\n'
[ $HAVE_QUEUE -eq 1 ] && printf '#define HAVE_QUEUE\t1\n'
[ $HAVE_REALLOCARRAY -eq 1 ] && printf '#define HAVE_REALLOCARRAY\t1\n'

[ $HAVE_DEAD -eq 0 ] && printf '#define __dead\n'

[ $HAVE_ARC4RANDOM -eq 0 ] && \
	printf 'uint32_t arc4random(void);\n'
[ $HAVE_PLEDGE -eq 0 ] && \
	printf 'int pledge(const char *, const char *);\n'
[ $HAVE_REALLOCARRAY -eq 0 ] && \
	printf 'void *reallocarray(void *, size_t, size_t);\n'

# Ensure this subshell always exits 0.
true
) >>config.h

# Use echo to normalize whitespace.
cat <<EOF >Makefile.inc
CC=		$(echo $CC)
CFLAGS=		$(echo $CFLAGS)
CPPFLAGS=	$(echo $CPPFLAGS)
DEBUG=		$(echo $DEBUG)
INSTALL=	$(echo $INSTALL)
LDFLAGS=	$(echo $LDFLAGS)
YFLAGS=		$(echo $YFLAGS)
EOF
